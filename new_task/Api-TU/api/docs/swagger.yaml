basePath: /v1
definitions:
  models.CreateTask:
    properties:
      assignee_id:
        type: string
      deadline:
        type: string
      name:
        type: string
      status:
        type: string
      summary:
        type: string
      title:
        type: string
    type: object
  models.CreateUser:
    properties:
      address:
        type: string
      bio:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      profile_photo:
        type: string
      username:
        type: string
    type: object
  models.Error:
    properties:
      message:
        type: string
    type: object
  models.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.RegisterResponseModel:
    properties:
      message:
        type: string
    type: object
  models.StandardErrorModel:
    properties:
      error:
        $ref: '#/definitions/models.Error'
    type: object
  models.Task:
    properties:
      Assignee_id:
        type: string
      created_at:
        type: string
      deadline:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: string
      summary:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.UpdateTasks:
    properties:
      assignee_id:
        type: string
      deadline:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: string
      summary:
        type: string
      title:
        type: string
    type: object
  models.UpdateUser:
    properties:
      address:
        type: string
      bio:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      id:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      profile_photo:
        type: string
      username:
        type: string
    type: object
  models.User:
    properties:
      Email:
        type: string
      address:
        type: string
      bio:
        type: string
      code:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      first_name:
        type: string
      gender:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      profile_photo:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  title: Task api
paths:
  /register:
    post:
      consumes:
      - application/json
      description: Register - API for registering users
      parameters:
      - description: register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandardErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandardErrorModel'
      summary: Register
      tags:
      - register
  /task/{id}:
    delete:
      consumes:
      - application/json
      description: Delete task
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Delete task
      tags:
      - Task
    get:
      consumes:
      - application/json
      description: Get task
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: Get task
      tags:
      - Task
    put:
      consumes:
      - application/json
      description: Update task
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTasks'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: Update task
      tags:
      - Task
  /tasks:
    post:
      consumes:
      - application/json
      description: This API for creating a new task
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreateTask'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Task'
      summary: Create new task
      tags:
      - Task
  /user:
    post:
      consumes:
      - application/json
      description: Get My Profile
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - BearerAuth: []
      summary: Login
      tags:
      - User
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete User
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - BearerAuth: []
      summary: DeleteUser
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get User
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - BearerAuth: []
      summary: GetUser
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update User
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - User
  /users:
    post:
      consumes:
      - application/json
      description: This API for creating a new user
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
      summary: Create new user
      tags:
      - User
  /verify/{code}:
    post:
      consumes:
      - application/json
      description: returns access token
      parameters:
      - description: code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandardErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandardErrorModel'
      summary: Verify
      tags:
      - register
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
